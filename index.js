(function(){
  var ref$, assign, zipWith, moment, Range;
  ref$ = require('leshdash'), assign = ref$.assign, zipWith = ref$.zipWith;
  moment = require('moment');
  Range = require('moment-range');
  assign(Range.prototype, {
    test: function(){
      return 3;
    },
    zoomIn: function(n, t){
      if (!n) {
        n = this.diff() / 4;
      }
      return this.transform(function(it){
        return it.add(n, t);
      }, function(it){
        return it.subtract(n, t);
      });
    },
    zoomOut: function(n, t){
      if (!n) {
        n = this.diff() / 4;
      }
      return this.transform(function(it){
        return it.subtract(n, t);
      }, function(it){
        return it.add(n, t);
      });
    },
    back: function(n, t){
      if (!n) {
        n = this.diff() / 2;
      }
      return this.transform(function(it){
        return it.subtract(n, t);
      });
    },
    forward: function(n, t){
      if (!n) {
        n = this.diff() / 2;
      }
      return this.transform(function(it){
        return it.add(n, t);
      });
    },
    map: function(it){
      return [it(this.start), it(this.end)];
    },
    format: function(format){
      return this.map(function(it){
        return it.format(format);
      });
    },
    transform: function(updateStart, updateEnd){
      return new Range(zipWith([updateStart, updateEnd || updateStart], [this.start, this.end], function(cb, m){
        return cb(m.clone());
      }));
    }
  });
  module.exports = Range;
}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2xlc2gvY29kaW5nL3Jlc2JvdS9tb21lbnQtbGVzaHJhbmdlL2luZGV4LmxzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0VBRUUsSUFBQSxHQUFBLE9BQUEsQ0FBQSxVQUFBLENBQUEsRUFBWSxNQUFaLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBWSxNQUFaLEVBQW9CLE9BQXBCLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBb0I7RUFDcEIsTUFBQSxDQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsUUFBQTtFQUNnQixLQUFoQixDQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsY0FBQTtFQUdGLE9BQU8sS0FBSyxDQUFBLFdBQ1Y7SUFBQSxNQUFNLFFBQUEsQ0FBQTthQUFHOztJQUVULFFBQVEsUUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBO01BQ04sSUFBRyxDQUFJLENBQVA7UUFBYyxDQUFFLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxJQUFNLENBQUYsQ0FBRSxDQUFBLENBQUEsQ0FBRTs7YUFDM0IsSUFBQyxDQUFBLFVBQVcsUUFBQSxDQUFBLEVBQUE7ZUFBQSxFQUFBLENBQUMsSUFBSSxHQUFHLENBQUg7U0FBUSxRQUFBLENBQUEsRUFBQTtlQUFBLEVBQUEsQ0FBQyxTQUFTLEdBQUcsQ0FBSDtPQUF4Qjs7SUFFYixTQUFTLFFBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQTtNQUNQLElBQUcsQ0FBSSxDQUFQO1FBQWMsQ0FBRSxDQUFBLENBQUEsQ0FBRSxJQUFDLENBQUEsSUFBTSxDQUFGLENBQUUsQ0FBQSxDQUFBLENBQUU7O2FBQzNCLElBQUMsQ0FBQSxVQUFXLFFBQUEsQ0FBQSxFQUFBO2VBQUEsRUFBQSxDQUFDLFNBQVMsR0FBRyxDQUFIO1NBQVEsUUFBQSxDQUFBLEVBQUE7ZUFBQSxFQUFBLENBQUMsSUFBSSxHQUFHLENBQUg7T0FBeEI7O0lBRWIsTUFBTSxRQUFBLENBQUEsQ0FBQSxFQUFBLENBQUE7TUFDSixJQUFHLENBQUksQ0FBUDtRQUFjLENBQUUsQ0FBQSxDQUFBLENBQUUsSUFBQyxDQUFBLElBQU0sQ0FBRixDQUFFLENBQUEsQ0FBQSxDQUFFOzthQUMzQixJQUFDLENBQUEsVUFBVyxRQUFBLENBQUEsRUFBQTtlQUFBLEVBQUEsQ0FBQyxTQUFTLEdBQUcsQ0FBSDtPQUFYOztJQUViLFNBQVMsUUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBO01BQ1AsSUFBRyxDQUFJLENBQVA7UUFBYyxDQUFFLENBQUEsQ0FBQSxDQUFFLElBQUMsQ0FBQSxJQUFNLENBQUYsQ0FBRSxDQUFBLENBQUEsQ0FBRTs7YUFDM0IsSUFBQyxDQUFBLFVBQVcsUUFBQSxDQUFBLEVBQUE7ZUFBQSxFQUFBLENBQUMsSUFBSSxHQUFHLENBQUg7T0FBTjs7SUFFYixLQUFLLFFBQUEsQ0FBQSxFQUFBO2FBQUcsQ0FBRSxHQUFHLElBQUMsQ0FBQSxLQUFGLEdBQVUsR0FBRyxJQUFDLENBQUEsR0FBRixDQUFoQjs7SUFFUixRQUFRLFFBQUEsQ0FBQSxNQUFBO2FBQVksSUFBQyxDQUFBLElBQUssUUFBQSxDQUFBLEVBQUE7ZUFBQSxFQUFBLENBQUMsT0FBTyxNQUFBO09BQVQ7O0lBRXpCLFdBQVcsUUFBQSxDQUFBLFdBQUEsRUFBQSxTQUFBO2lCQUVMLE1BQU0sUUFDUixDQUFFLGFBQWEsU0FBVSxDQUFBLEVBQUEsQ0FBRyxXQUE1QixHQUNBLENBQUUsSUFBQyxDQUFBLE9BQU8sSUFBQyxDQUFBLEdBQVgsR0FFQSxRQUFBLENBQUEsRUFBQSxFQUFBLENBQUE7ZUFBVyxHQUFHLENBQUMsQ0FBQyxNQUFLLENBQVA7T0FIZCxDQURROztFQXhCWixDQURLO0VBZ0NQLE1BQU0sQ0FBQyxPQUFRLENBQUEsQ0FBQSxDQUFFIiwic291cmNlc0NvbnRlbnQiOlsiI2F1dG9jb21waWxlXG5yZXF1aXJlISB7XG4gIGxlc2hkYXNoOiB7IGFzc2lnbiwgemlwV2l0aCB9XG4gIG1vbWVudFxuICAnbW9tZW50LXJhbmdlJzogUmFuZ2Vcbn1cblxuYXNzaWduIFJhbmdlOjosIGRvXG4gIHRlc3Q6IC0+IDNcbiAgXG4gIHpvb21JbjogKG4sIHQpIC0+XG4gICAgaWYgbm90IG4gdGhlbiBuID0gQGRpZmYhIC8gNFxuICAgIEB0cmFuc2Zvcm0gKC5hZGQgbiwgdCksICguc3VidHJhY3QgbiwgdClcblxuICB6b29tT3V0OiAobiwgdCkgLT5cbiAgICBpZiBub3QgbiB0aGVuIG4gPSBAZGlmZiEgLyA0XG4gICAgQHRyYW5zZm9ybSAoLnN1YnRyYWN0IG4sIHQpLCAoLmFkZCBuLCB0KVxuXG4gIGJhY2s6IChuLCB0KSAtPlxuICAgIGlmIG5vdCBuIHRoZW4gbiA9IEBkaWZmISAvIDJcbiAgICBAdHJhbnNmb3JtICguc3VidHJhY3QgbiwgdClcbiAgXG4gIGZvcndhcmQ6IChuLCB0KSAtPlxuICAgIGlmIG5vdCBuIHRoZW4gbiA9IEBkaWZmISAvIDJcbiAgICBAdHJhbnNmb3JtICguYWRkIG4sIHQpXG5cbiAgbWFwOiAtPiBbIGl0KEBzdGFydCksIGl0KEBlbmQpIF1cbiAgXG4gIGZvcm1hdDogKGZvcm1hdCkgLT4gQG1hcCAoLmZvcm1hdCBmb3JtYXQpXG5cbiAgdHJhbnNmb3JtOiAodXBkYXRlU3RhcnQsIHVwZGF0ZUVuZCkgLT5cbiAgICBcbiAgICBuZXcgUmFuZ2UgemlwV2l0aCBkb1xuICAgICAgWyB1cGRhdGVTdGFydCwgdXBkYXRlRW5kIG9yIHVwZGF0ZVN0YXJ0IF1cbiAgICAgIFsgQHN0YXJ0LCBAZW5kIF1cbiAgICAgIFxuICAgICAgKGNiLCBtKSAtPiBjYiBtLmNsb25lIVxuICAgICAgXG5cbm1vZHVsZS5leHBvcnRzID0gUmFuZ2VcbiJdfQ==
